{"version":3,"sources":["firebase/firebase.js","hours/hoursConstants.js","hours/hoursGrid.js","profile/profile.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","columns","id","description","enabled","months","years","HoursGrid","props","HoursConstants","isTemplate","snackbarOpen","isLoading","fetchData","month","year","profileId","a","db","firestore","collection","get","response","instance","docs","find","doc","data","setState","prevState","handleClose","event","reason","type","currentYear","Date","getFullYear","currentMonth","getMonth","submitHours","bind","handleClientInput","handleProjectInput","state","days","getDaysInMonth","expandColumns","client","project","profile","value","column","day","this","numberValue","Number","isNaN","checked","daysInAMonth","getDate","rows","i","push","dayOfTheWeek","getDay","date","worked","overtime","sick","holiday","publicHoliday","available","education","other","standBy","kilometers","explanation","row","isNotWeekend","map","x","reduce","total","currentValue","TableCell","align","key","TextField","inputProps","style","textAlign","onChange","handleChange","target","size","firstName","lastName","set","then","docRef","catch","error","console","noValidate","autoComplete","Toolbar","Grid","container","direction","alignItems","FormControl","InputLabel","Select","labelId","setMonth","MenuItem","label","FormControlLabel","control","Switch","color","Button","variant","onClick","TableContainer","component","Paper","className","Table","stickyHeader","aria-label","TableHead","TableRow","TableBody","getRowClass","scope","hoursCell","onBlur","TableFooter","getTotal","Snackbar","anchorOrigin","vertical","horizontal","onClose","open","autoHideDuration","message","React","Component","useStyles","makeStyles","theme","layout","width","marginLeft","spacing","marginRight","paper","marginTop","marginBottom","padding","Profile","classes","useState","setFirstName","setLastName","item","xs","fullWidth","root","display","activeItem","backgroundColor","palette","primary","menuButton","hide","drawer","flexShrink","whiteSpace","drawerOpen","transition","transitions","create","easing","sharp","duration","enteringScreen","drawerClose","leavingScreen","overflowX","breakpoints","up","toolbar","justifyContent","mixins","content","flexGrow","title","margin","Boolean","window","location","hostname","match","ReactDOM","render","setProfile","setIsLoading","firstProfile","index","profileData","useEffect","CssBaseline","Drawer","clsx","Divider","List","ListItem","NavLink","button","to","ListItemIcon","ListItemText","exact","path","Typography","src","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4e68c0c9.chunk.js","sourcesContent":["import firebase from \"firebase\";\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n    apiKey: \"AIzaSyAkvaF-lqt8ZxyBwcNlwrHhj-Pp3Ev54pI\",\n    authDomain: \"codezilla-hours.firebaseapp.com\",\n    databaseURL: \"https://codezilla-hours.firebaseio.com\",\n    projectId: \"codezilla-hours\",\n    storageBucket: \"codezilla-hours.appspot.com\",\n    messagingSenderId: \"634823174203\",\n    appId: \"1:634823174203:web:ca40af276111cfae66541e\",\n    measurementId: \"G-DR0KK33WCW\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;\n","export const columns = [\n    {\n        id: \"worked\",\n        description: \"Gewerkt\",\n        enabled: true\n    },\n    {\n        id: \"overtime\",\n        description: \"Overwerk\",\n        enabled: true\n    },\n    {\n        id: \"sick\",\n        description: \"Ziek\",\n        enabled: true\n    },\n    {\n        id: \"holiday\",\n        description: \"Verlof\",\n        enabled: true\n    },\n    {\n        id: \"publicHoliday\",\n        description: \"Feestdag\",\n        enabled: true\n    },\n    {\n        id: \"available\",\n        description: \"Beschikbaar\",\n        enabled: false\n    },\n    {\n        id: \"education\",\n        description: \"Opleiding\",\n        enabled: false\n    },\n    {\n        id: \"other\",\n        description: \"Overig\",\n        enabled: false\n    },\n    {\n        id: \"standBy\",\n        description: \"StandBy\",\n        enabled: false\n    },\n    {\n        id: \"kilometers\",\n        description: \"Kilometers\",\n        enabled: false\n    }\n];\n\nexport const months = [\n    {\n        id: 1,\n        description: \"Januari\"\n    },\n    {\n        id: 2,\n        description: \"Februari\"\n    },\n    {\n        id: 3,\n        description: \"Maart\"\n    },\n    {\n        id: 4,\n        description: \"April\"\n    },\n    {\n        id: 5,\n        description: \"Mei\"\n    },\n    {\n        id: 6,\n        description: \"Juni\"\n    },\n    {\n        id: 7,\n        description: \"Juli\"\n    },\n    {\n        id: 8,\n        description: \"Augustus\"\n    },\n    {\n        id: 9,\n        description: \"September\"\n    },\n    {\n        id: 10,\n        description: \"Oktober\"\n    },\n    {\n        id: 11,\n        description: \"November\"\n    },\n    {\n        id: 12,\n        description: \"December\"\n    }\n];\n\nexport const years = [2020, 2021, 2022, 2023, 2025];\n","import React from \"react\";\nimport Table from \"@material-ui/core/Table\";\nimport Button from \"@material-ui/core/Button\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@material-ui/core/Grid\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Select from \"@material-ui/core/Select\";\nimport Switch from \"@material-ui/core/Switch\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport TableFooter from \"@material-ui/core/TableFooter\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\n\nimport firebase from \"../firebase/firebase\";\n\nimport * as HoursConstants from \"./hoursConstants\";\n\nclass HoursGrid extends React.Component {\n    columns = HoursConstants.columns;\n    months = HoursConstants.months;\n    years = HoursConstants.years;\n    isTemplate = false;\n    snackbarOpen = false;\n    isLoading = true;\n\n    constructor(props) {\n        super(props);\n\n        this.isTemplate = props.type === \"template\";\n        const currentYear = new Date().getFullYear();\n        const currentMonth = new Date().getMonth() + 1;\n\n        this.submitHours = this.submitHours.bind(this);\n        this.handleClientInput = this.handleClientInput.bind(this);\n        this.handleProjectInput = this.handleProjectInput.bind(this);\n\n        this.state = {\n            data: {\n                id: \"\",\n                days: this.getDaysInMonth(currentMonth, currentYear),\n                expandColumns: this.isTemplate,\n                month: currentMonth,\n                year: currentYear,\n                client: \"\",\n                project: \"\",\n                profileId: props.profile.id,\n                profile: props.profile\n            },\n            snackbarOpen: false\n        };\n\n        this.fetchData(currentMonth, currentYear, props.profile.id);\n    }\n\n    fetchData = async (month, year, profileId) => {\n        const db = firebase.firestore();\n        const response = await db.collection(\"months\").get();\n        const instance = response.docs.find(doc => {\n            const data = doc.data();\n            return (\n                data.month === month &&\n                data.year === year &&\n                data.profileId === profileId\n            );\n        });\n\n        if (instance) {\n            this.setState(prevState => {\n                prevState.data = instance.data();\n                prevState.data.id = instance.id;\n                return prevState;\n            });\n        }\n\n        this.isLoading = false;\n    };\n\n    handleChange(value, column, day) {\n        const days = this.state.data.days;\n        const numberValue = Number(value);\n        days[day][column] = isNaN(numberValue) ? \"\" : numberValue;\n        this.setState({ ...this.state.data, days: days });\n    }\n\n    expandColumns(checked) {\n        this.setState(prevState => {\n            prevState.data.expandColumns = checked;\n            return prevState;\n        });\n    }\n\n    setMonth(month, year) {\n        const days = this.getDaysInMonth(month, year);\n        this.setState(prevState => {\n            prevState.data.month = month;\n            prevState.data.year = year;\n            prevState.data.days = days;\n            return prevState;\n        });\n    }\n\n    getDaysInMonth(month, year) {\n        const daysInAMonth = new Date(year, month, 0).getDate();\n        const rows = [];\n\n        for (let i = 1; i < daysInAMonth; i++) {\n            rows.push({\n                day: i,\n                dayOfTheWeek: new Date(year, month - 1, i).getDay(),\n                date: new Date(year, month - 1, i),\n                worked: \"\",\n                overtime: \"\",\n                sick: \"\",\n                holiday: \"\",\n                publicHoliday: \"\",\n                available: \"\",\n                education: \"\",\n                other: \"\",\n                standBy: \"\",\n                kilometers: \"\",\n                explanation: \"\"\n            });\n        }\n\n        return rows;\n    }\n\n    getRowClass(row) {\n        return this.isNotWeekend(row.dayOfTheWeek) ? \"\" : \"highlight\";\n    }\n\n    getTotal(column) {\n        const values = this.state.data.days.map(x => x[column]);\n        return values.reduce((total, currentValue) => {\n            return Number(total) + Number(currentValue);\n        });\n    }\n\n    isNotWeekend(dayOfTheWeek) {\n        return (dayOfTheWeek !== 0 && dayOfTheWeek !== 6) || this.isTemplate;\n    }\n\n    hoursCell(row, column) {\n        return (\n            <TableCell align=\"right\" key={row.day + \"-\" + column}>\n                {this.isNotWeekend(row.dayOfTheWeek) ? (\n                    <TextField\n                        id={column}\n                        inputProps={{\n                            style: {\n                                textAlign: \"right\"\n                            },\n                            day: row.day\n                        }}\n                        value={row[column]}\n                        onChange={event =>\n                            this.handleChange(\n                                event.target.value,\n                                column,\n                                row.day - 1\n                            )\n                        }\n                        size=\"small\"\n                    />\n                ) : null}\n            </TableCell>\n        );\n    }\n\n    handleClientInput(value) {\n        this.setState(prevState => {\n            prevState.data.client = value;\n            return prevState;\n        });\n    }\n\n    handleProjectInput(value) {\n        this.setState(prevState => {\n            prevState.data.project = value;\n            return prevState;\n        });\n    }\n\n    submitHours() {\n        const db = firebase.firestore();\n        db.collection(\"months\")\n            .doc(\n                this.state.data.year +\n                    \"-\" +\n                    this.state.data.month +\n                    \"-\" +\n                    this.state.data.profile.firstName +\n                    \"\" +\n                    this.state.data.profile.lastName\n            )\n            .set(this.state.data)\n            .then(docRef => {\n                this.setState(prevState => {\n                    prevState.snackbarOpen = true;\n                    return prevState;\n                });\n            })\n            .catch(error => {\n                console.error(\"Error adding document: \", error);\n            });\n    }\n\n    handleClose = (event, reason) => {\n        if (reason === \"clickaway\") {\n            return;\n        }\n\n        this.setState(prevState => {\n            prevState.snackbarOpen = false;\n            return prevState;\n        });\n    };\n\n    render() {\n        return (\n            <form noValidate autoComplete=\"off\">\n                {!this.isTemplate ? (\n                    <Toolbar>\n                        <Grid container direction=\"row\" alignItems=\"flex-start\">\n                            <FormControl>\n                                <InputLabel id=\"select-month-label\">\n                                    Maand\n                                </InputLabel>\n                                <Select\n                                    labelId=\"select-month-label\"\n                                    id=\"select-month-label\"\n                                    value={this.state.data.month}\n                                    onChange={event =>\n                                        this.setMonth(\n                                            event.target.value,\n                                            this.state.data.year\n                                        )\n                                    }\n                                >\n                                    {this.months.map(month => {\n                                        return (\n                                            <MenuItem\n                                                value={month.id}\n                                                key={month.id}\n                                            >\n                                                {month.description}\n                                            </MenuItem>\n                                        );\n                                    })}\n                                </Select>\n                            </FormControl>\n                            <FormControl>\n                                <InputLabel id=\"select-year-label\">\n                                    Jaar\n                                </InputLabel>\n                                <Select\n                                    labelId=\"select-year-label\"\n                                    id=\"select-year-label\"\n                                    value={this.state.data.year}\n                                    onChange={event =>\n                                        this.setMonth(\n                                            this.state.data.month,\n                                            event.target.value\n                                        )\n                                    }\n                                >\n                                    {this.years.map(year => {\n                                        return (\n                                            <MenuItem value={year} key={year}>\n                                                {year}\n                                            </MenuItem>\n                                        );\n                                    })}\n                                </Select>\n                            </FormControl>\n                            <TextField\n                                id=\"client\"\n                                label=\"Klant\"\n                                value={this.state.data.client}\n                                onChange={event =>\n                                    this.handleClientInput(event.target.value)\n                                }\n                            />\n                            <TextField\n                                id=\"project\"\n                                label=\"Project\"\n                                value={this.state.data.project}\n                                onChange={event =>\n                                    this.handleProjectInput(event.target.value)\n                                }\n                            />\n\n                            <FormControlLabel\n                                control={\n                                    <Switch\n                                        checked={this.state.data.expandColumns}\n                                        onChange={event =>\n                                            this.expandColumns(\n                                                event.target.checked\n                                            )\n                                        }\n                                        color=\"primary\"\n                                    />\n                                }\n                                label=\"Toon alle velden\"\n                            />\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={this.submitHours}\n                            >\n                                Verstuur\n                            </Button>\n                        </Grid>\n                    </Toolbar>\n                ) : null}\n                <TableContainer component={Paper} className=\"hoursGrid\">\n                    <Table stickyHeader size=\"small\" aria-label=\"simple table\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell></TableCell>\n                                {this.columns.map(column => {\n                                    if (\n                                        !column.enabled &&\n                                        !this.state.data.expandColumns\n                                    ) {\n                                        return null;\n                                    }\n                                    return (\n                                        <TableCell\n                                            align=\"right\"\n                                            key={\"header-\" + column.id}\n                                        >\n                                            {column.description}\n                                        </TableCell>\n                                    );\n                                })}\n                                <TableCell align=\"right\">Toelichting</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {this.state.data.days.map(row => (\n                                <TableRow\n                                    key={row.day}\n                                    className={this.getRowClass(row)}\n                                >\n                                    <TableCell component=\"th\" scope=\"row\">\n                                        {row.day}\n                                    </TableCell>\n                                    {this.columns.map(column => {\n                                        if (\n                                            !column.enabled &&\n                                            !this.state.data.expandColumns\n                                        ) {\n                                            return null;\n                                        }\n                                        return this.hoursCell(row, column.id);\n                                    })}\n                                    <TableCell align=\"right\">\n                                        {this.isNotWeekend(row.dayOfTheWeek) ? (\n                                            <TextField\n                                                id=\"explanation\"\n                                                inputProps={{\n                                                    day: row.day\n                                                }}\n                                                onBlur={event =>\n                                                    this.handleChange(\n                                                        event.target.value,\n                                                        \"explanation\",\n                                                        row.day\n                                                    )\n                                                }\n                                            />\n                                        ) : null}\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                        <TableFooter>\n                            <TableRow>\n                                <TableCell> Totaal</TableCell>\n                                {this.columns.map(column => {\n                                    if (\n                                        !column.enabled &&\n                                        !this.state.data.expandColumns\n                                    ) {\n                                        return null;\n                                    }\n                                    return (\n                                        <TableCell\n                                            align=\"right\"\n                                            key={\"footer-\" + column.id}\n                                        >\n                                            {this.getTotal(column.id)}\n                                        </TableCell>\n                                    );\n                                })}\n                                <TableCell align=\"right\"></TableCell>\n                            </TableRow>\n                        </TableFooter>\n                    </Table>\n                </TableContainer>\n                <Snackbar\n                    anchorOrigin={{\n                        vertical: \"bottom\",\n                        horizontal: \"left\"\n                    }}\n                    onClose={this.handleClose}\n                    open={this.state.snackbarOpen}\n                    autoHideDuration={6000}\n                    message=\"Uren verstuurd\"\n                />\n            </form>\n        );\n    }\n}\n\nexport default HoursGrid;\n","import React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Button from \"@material-ui/core/Button\";\n\nimport firebase from \"../firebase/firebase\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles(theme => ({\n    layout: {\n        width: \"auto\",\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1)\n    },\n    paper: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n        padding: theme.spacing(2)\n    }\n}));\n\nexport default function Profile(props) {\n    const classes = useStyles();\n    const [firstName, setFirstName] = React.useState(props.profile.firstName);\n    const [lastName, setLastName] = React.useState(props.profile.lastName);\n\n    const saveProfile = () => {\n        const db = firebase.firestore();\n        db.collection(\"profile\")\n            .doc(props.profile.id)\n            .set({ lastName, firstName });\n    };\n\n    return (\n        <div className={classes.layout}>\n            <form noValidate autoComplete=\"off\">\n                <Toolbar>\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={saveProfile}\n                    >\n                        Bewaar\n                    </Button>\n                </Toolbar>\n                <Paper className={classes.paper}>\n                    <Grid container spacing={3}>\n                        <Grid item xs={12}>\n                            <TextField\n                                id=\"firstName\"\n                                label=\"Voornaam\"\n                                value={firstName}\n                                onChange={event => {\n                                    setFirstName(event.target.value);\n                                }}\n                                fullWidth\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                id=\"lastName\"\n                                label=\"Achternaam\"\n                                value={lastName}\n                                onChange={event => {\n                                    setLastName(event.target.value);\n                                }}\n                                fullWidth\n                            />\n                        </Grid>\n                    </Grid>\n                </Paper>\n            </form>\n        </div>\n    );\n}\n","import React from \"react\";\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    NavLink\n} from \"react-router-dom\";\nimport clsx from \"clsx\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport List from \"@material-ui/core/List\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Divider from \"@material-ui/core/Divider\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport GridOn from \"@material-ui/icons/GridOn\";\nimport AccountCircle from \"@material-ui/icons/AccountCircle\";\nimport BookmarkBorder from \"@material-ui/icons/BookmarkBorder\";\nimport Typography from \"@material-ui/core/Typography\";\n\nimport firebase from \"./firebase/firebase\";\n\nimport HoursGrid from \"./hours/hoursGrid\";\nimport Profile from \"./profile/profile\";\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        display: \"flex\"\n    },\n    activeItem: {\n        backgroundColor: theme.palette.primary[100]\n    },\n    item: {},\n    menuButton: {\n        marginRight: 36\n    },\n    hide: {\n        display: \"none\"\n    },\n    drawer: {\n        width: drawerWidth,\n        flexShrink: 0,\n        whiteSpace: \"nowrap\"\n    },\n    drawerOpen: {\n        width: drawerWidth,\n        transition: theme.transitions.create(\"width\", {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen\n        })\n    },\n    drawerClose: {\n        transition: theme.transitions.create(\"width\", {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen\n        }),\n        overflowX: \"hidden\",\n        width: theme.spacing(7) + 1,\n        [theme.breakpoints.up(\"sm\")]: {\n            width: theme.spacing(9) + 1\n        }\n    },\n    toolbar: {\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        padding: theme.spacing(0, 1),\n        ...theme.mixins.toolbar\n    },\n    content: {\n        flexGrow: 1\n    },\n    title: {\n        margin: theme.spacing(0, 1)\n    }\n}));\n\nexport default function App() {\n    const classes = useStyles();\n    const [open] = React.useState(true);\n    const [profile, setProfile] = React.useState({});\n    const [isLoading, setIsLoading] = React.useState(true);\n\n    const fetchData = async () => {\n        const db = firebase.firestore();\n        const data = await db.collection(\"profile\").get();\n        const firstProfile = data.docs.find((doc, index) => index === 0);\n        const profileData = firstProfile.data();\n        profileData.id = firstProfile.id;\n        setProfile(profileData);\n        setIsLoading(false);\n    };\n\n    React.useEffect(() => {\n        fetchData();\n    }, []);\n\n    return (\n        <div className={classes.root}>\n            <Router>\n                <CssBaseline />\n                <Drawer\n                    variant=\"permanent\"\n                    className={clsx(classes.drawer, {\n                        [classes.drawerOpen]: open,\n                        [classes.drawerClose]: !open\n                    })}\n                    classes={{\n                        paper: clsx({\n                            [classes.drawerOpen]: open,\n                            [classes.drawerClose]: !open\n                        })\n                    }}\n                >\n                    <div className={classes.toolbar}>CODEZILLA Hours</div>\n                    <Divider />\n                    <List>\n                        <ListItem\n                            component={NavLink}\n                            button\n                            key=\"profile\"\n                            to=\"/profile\"\n                        >\n                            <ListItemIcon>\n                                <AccountCircle />\n                            </ListItemIcon>\n                            <ListItemText primary=\"Profiel\" />\n                        </ListItem>\n                        <ListItem component={NavLink} button key=\"hours\" to=\"/\">\n                            <ListItemIcon>\n                                <GridOn />\n                            </ListItemIcon>\n                            <ListItemText primary=\"Urenstaat\" />\n                        </ListItem>\n                        <ListItem\n                            component={NavLink}\n                            button\n                            key=\"template\"\n                            to=\"/template\"\n                        >\n                            <ListItemIcon>\n                                <BookmarkBorder />\n                            </ListItemIcon>\n                            <ListItemText primary=\"Template\" />\n                        </ListItem>\n                    </List>\n                </Drawer>\n                <main className={classes.content}>\n                    {!isLoading ? (\n                        <Switch>\n                            <Route exact path=\"/\">\n                                <HoursGrid type=\"month\" profile={profile} />\n                            </Route>\n                            <Route path=\"/template\">\n                                <Typography\n                                    variant=\"h4\"\n                                    component=\"h4\"\n                                    className={classes.title}\n                                >\n                                    Template\n                                </Typography>\n                                <HoursGrid type=\"template\" profile={profile} />\n                            </Route>\n                            <Route path=\"/profile\">\n                                <Typography\n                                    variant=\"h4\"\n                                    component=\"h4\"\n                                    className={classes.title}\n                                >\n                                    Profiel\n                                </Typography>\n                                <Profile profile={profile} />\n                            </Route>\n                        </Switch>\n                    ) : null}\n                </main>\n            </Router>\n\n            <script src=\"https://www.gstatic.com/firebasejs/7.11.0/firebase-app.js\"></script>\n\n            <script src=\"https://www.gstatic.com/firebasejs/7.11.0/firebase-analytics.js\"></script>\n\n            <script src=\"https://www.gstatic.com/firebasejs/7.11.0/firebase-auth.js\"></script>\n            <script src=\"https://www.gstatic.com/firebasejs/7.11.0/firebase-firestore.js\"></script>\n        </div>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}