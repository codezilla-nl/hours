{"version":3,"sources":["hours/hoursConstants.js","hours/hoursGrid.js","profile/profile.js","App.js","serviceWorker.js","index.js"],"names":["columns","id","description","enabled","months","years","HoursGrid","props","HoursConstants","isTemplate","snackbarOpen","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","type","currentYear","Date","getFullYear","currentMonth","getMonth","submitHours","bind","handleClientInput","handleProjectInput","state","data","days","getDaysInMonth","expandColumns","month","year","client","project","firebase","length","db","collection","get","then","querySnapshot","forEach","doc","console","log","value","column","day","this","Number","setState","checked","prevState","daysInAMonth","getDate","rows","i","push","dayOfTheWeek","getDay","date","worked","overtime","sick","holiday","publicHoliday","available","education","other","standBy","kilometers","explanation","row","isNotWeekend","map","x","reduce","total","currentValue","TableCell","align","key","TextField","inputProps","style","textAlign","onBlur","event","handleChange","target","size","add","docRef","catch","error","noValidate","autoComplete","Toolbar","Grid","container","direction","alignItems","FormControl","InputLabel","Select","labelId","onChange","setMonth","MenuItem","label","FormControlLabel","control","Switch","color","Button","variant","onClick","TableContainer","component","Paper","className","Table","stickyHeader","aria-label","TableHead","TableRow","TableBody","getRowClass","scope","hoursCell","TableFooter","getTotal","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","message","React","Component","useStyles","makeStyles","theme","layout","width","marginLeft","spacing","marginRight","paper","marginTop","marginBottom","padding","Profile","classes","item","xs","fullWidth","root","display","activeItem","backgroundColor","palette","primary","menuButton","hide","drawer","flexShrink","whiteSpace","drawerOpen","transition","transitions","create","easing","sharp","duration","enteringScreen","drawerClose","leavingScreen","overflowX","breakpoints","up","toolbar","justifyContent","mixins","content","flexGrow","title","margin","Boolean","window","location","hostname","match","ReactDOM","render","useState","CssBaseline","Drawer","clsx","Divider","List","ListItem","NavLink","button","to","ListItemIcon","ListItemText","exact","path","Typography","src","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.84b00241.chunk.js","sourcesContent":["export const columns = [\n    {\n        id: \"worked\",\n        description: \"Gewerkt\",\n        enabled: true\n    },\n    {\n        id: \"overtime\",\n        description: \"Overwerk\",\n        enabled: true\n    },\n    {\n        id: \"sick\",\n        description: \"Ziek\",\n        enabled: true\n    },\n    {\n        id: \"holiday\",\n        description: \"Verlof\",\n        enabled: true\n    },\n    {\n        id: \"publicHoliday\",\n        description: \"Feestdag\",\n        enabled: true\n    },\n    {\n        id: \"available\",\n        description: \"Beschikbaar\",\n        enabled: false\n    },\n    {\n        id: \"education\",\n        description: \"Opleiding\",\n        enabled: false\n    },\n    {\n        id: \"other\",\n        description: \"Overig\",\n        enabled: false\n    },\n    {\n        id: \"standBy\",\n        description: \"StandBy\",\n        enabled: false\n    },\n    {\n        id: \"kilometers\",\n        description: \"Kilometers\",\n        enabled: false\n    }\n];\n\nexport const months = [\n    {\n        id: 1,\n        description: \"Januari\"\n    },\n    {\n        id: 2,\n        description: \"Februari\"\n    },\n    {\n        id: 3,\n        description: \"Maart\"\n    },\n    {\n        id: 4,\n        description: \"April\"\n    },\n    {\n        id: 5,\n        description: \"Mei\"\n    },\n    {\n        id: 6,\n        description: \"Juni\"\n    },\n    {\n        id: 7,\n        description: \"Juli\"\n    },\n    {\n        id: 8,\n        description: \"Augustus\"\n    },\n    {\n        id: 9,\n        description: \"September\"\n    },\n    {\n        id: 10,\n        description: \"Oktober\"\n    },\n    {\n        id: 11,\n        description: \"November\"\n    },\n    {\n        id: 12,\n        description: \"December\"\n    }\n];\n\nexport const years = [2020, 2021, 2022, 2023, 2025];\n","import React from \"react\";\nimport Table from \"@material-ui/core/Table\";\nimport Button from \"@material-ui/core/Button\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@material-ui/core/Grid\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Select from \"@material-ui/core/Select\";\nimport Switch from \"@material-ui/core/Switch\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport TableFooter from \"@material-ui/core/TableFooter\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\n\nimport * as HoursConstants from \"./hoursConstants\";\n\nimport * as firebase from \"firebase\";\nimport \"firebase/firestore\";\n\nclass HoursGrid extends React.Component {\n    columns = HoursConstants.columns;\n    months = HoursConstants.months;\n    years = HoursConstants.years;\n    isTemplate = false;\n    db;\n    snackbarOpen = false;\n\n    // Your web app's Firebase configuration\n    firebaseConfig = {\n        apiKey: \"AIzaSyAkvaF-lqt8ZxyBwcNlwrHhj-Pp3Ev54pI\",\n        authDomain: \"codezilla-hours.firebaseapp.com\",\n        databaseURL: \"https://codezilla-hours.firebaseio.com\",\n        projectId: \"codezilla-hours\",\n        storageBucket: \"codezilla-hours.appspot.com\",\n        messagingSenderId: \"634823174203\",\n        appId: \"1:634823174203:web:ca40af276111cfae66541e\",\n        measurementId: \"G-DR0KK33WCW\"\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.isTemplate = props.type === \"template\";\n        const currentYear = new Date().getFullYear();\n        const currentMonth = new Date().getMonth() + 1;\n\n        this.submitHours = this.submitHours.bind(this);\n        this.handleClientInput = this.handleClientInput.bind(this);\n        this.handleProjectInput = this.handleProjectInput.bind(this);\n\n        this.state = {\n            data: {\n                days: this.getDaysInMonth(0, currentYear),\n                expandColumns: this.isTemplate,\n                month: currentMonth,\n                year: currentYear,\n                client: \"\",\n                project: \"\"\n            }\n        };\n\n        // Initialize Firebase\n        if (!firebase.apps.length) {\n            firebase.initializeApp(this.firebaseConfig);\n        }\n\n        this.db = firebase.firestore();\n\n        this.db\n            .collection(\"months\")\n            .get()\n            .then(querySnapshot => {\n                querySnapshot.forEach(doc => {\n                    console.log(doc.data());\n                });\n            });\n    }\n\n    handleChange(value, column, day) {\n        var days = this.state.data.days;\n        days[day][column] = Number(value);\n        this.setState({ ...this.state.data, days: days });\n    }\n\n    expandColumns(checked) {\n        this.setState(prevState => {\n            prevState.data.expandColumns = checked;\n            return prevState;\n        });\n    }\n\n    setMonth(month, year) {\n        const days = this.getDaysInMonth(month, year);\n        this.setState(prevState => {\n            prevState.data.month = month;\n            prevState.data.year = year;\n            prevState.data.days = days;\n            return prevState;\n        });\n    }\n\n    getDaysInMonth(month, year) {\n        const daysInAMonth = new Date(year, month, 0).getDate();\n        const rows = [];\n\n        for (let i = 1; i < daysInAMonth; i++) {\n            rows.push({\n                day: i,\n                dayOfTheWeek: new Date(year, month - 1, i).getDay(),\n                date: new Date(year, month - 1, i),\n                worked: 0,\n                overtime: 0,\n                sick: 0,\n                holiday: 0,\n                publicHoliday: 0,\n                available: 0,\n                education: 0,\n                other: 0,\n                standBy: 0,\n                kilometers: 0,\n                explanation: \"\"\n            });\n        }\n\n        return rows;\n    }\n\n    getRowClass(row) {\n        return this.isNotWeekend(row.dayOfTheWeek) ? \"\" : \"highlight\";\n    }\n\n    getTotal(column) {\n        const values = this.state.data.days.map(x => x[column]);\n        return values.reduce((total, currentValue) => {\n            return total + currentValue;\n        });\n    }\n\n    isNotWeekend(dayOfTheWeek) {\n        return (dayOfTheWeek !== 0 && dayOfTheWeek !== 6) || this.isTemplate;\n    }\n\n    hoursCell(row, column) {\n        return (\n            <TableCell align=\"right\" key={row.day + \"-\" + column}>\n                {this.isNotWeekend(row.dayOfTheWeek) ? (\n                    <TextField\n                        id={column}\n                        inputProps={{\n                            style: {\n                                textAlign: \"right\"\n                            },\n                            day: row.day\n                        }}\n                        onBlur={event =>\n                            this.handleChange(\n                                event.target.value,\n                                column,\n                                row.day\n                            )\n                        }\n                        size=\"small\"\n                    />\n                ) : null}\n            </TableCell>\n        );\n    }\n\n    handleClientInput(event) {\n        var value = event.target.value;\n        this.setState(prevState => {\n            prevState.data.client = value;\n            return prevState;\n        });\n    }\n\n    handleProjectInput(event) {\n        var value = event.target.value;\n        this.setState(prevState => {\n            prevState.data.project = value;\n            return prevState;\n        });\n    }\n\n    submitHours() {\n        console.log(this.state);\n        this.db\n            .collection(\"months\")\n            .add(this.state.data)\n            .then(function(docRef) {\n                console.log(\"Document written with ID: \", docRef.id);\n                this.snackbarOpen = true;\n            })\n            .catch(function(error) {\n                console.error(\"Error adding document: \", error);\n            });\n    }\n\n    render() {\n        return (\n            <form noValidate autoComplete=\"off\">\n                {!this.isTemplate ? (\n                    <Toolbar>\n                        <Grid container direction=\"row\" alignItems=\"flex-start\">\n                            <FormControl>\n                                <InputLabel id=\"select-month-label\">\n                                    Maand\n                                </InputLabel>\n                                <Select\n                                    labelId=\"select-month-label\"\n                                    id=\"select-month-label\"\n                                    value={this.state.data.month}\n                                    onChange={event =>\n                                        this.setMonth(\n                                            event.target.value,\n                                            this.state.data.year\n                                        )\n                                    }\n                                >\n                                    {this.months.map(month => {\n                                        return (\n                                            <MenuItem\n                                                value={month.id}\n                                                key={month.id}\n                                            >\n                                                {month.description}\n                                            </MenuItem>\n                                        );\n                                    })}\n                                </Select>\n                            </FormControl>\n                            <FormControl>\n                                <InputLabel id=\"select-year-label\">\n                                    Jaar\n                                </InputLabel>\n                                <Select\n                                    labelId=\"select-year-label\"\n                                    id=\"select-year-label\"\n                                    value={this.state.data.year}\n                                    onChange={event =>\n                                        this.setMonth(\n                                            this.state.data.month,\n                                            event.target.value\n                                        )\n                                    }\n                                >\n                                    {this.years.map(year => {\n                                        return (\n                                            <MenuItem value={year} key={year}>\n                                                {year}\n                                            </MenuItem>\n                                        );\n                                    })}\n                                </Select>\n                            </FormControl>\n                            <TextField\n                                id=\"client\"\n                                label=\"Klant\"\n                                onBlur={this.handleClientInput}\n                            />\n                            <TextField\n                                id=\"project\"\n                                label=\"Project\"\n                                onBlur={this.handleProjectInput}\n                            />\n\n                            <FormControlLabel\n                                control={\n                                    <Switch\n                                        checked={this.state.data.expandColumns}\n                                        onChange={event =>\n                                            this.expandColumns(\n                                                event.target.checked\n                                            )\n                                        }\n                                        color=\"primary\"\n                                    />\n                                }\n                                label=\"Toon alle velden\"\n                            />\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={this.submitHours}\n                            >\n                                Verstuur\n                            </Button>\n                        </Grid>\n                    </Toolbar>\n                ) : null}\n                <TableContainer component={Paper} className=\"hoursGrid\">\n                    <Table stickyHeader size=\"small\" aria-label=\"simple table\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell></TableCell>\n                                {this.columns.map(column => {\n                                    if (\n                                        !column.enabled &&\n                                        !this.state.data.expandColumns\n                                    ) {\n                                        return null;\n                                    }\n                                    return (\n                                        <TableCell\n                                            align=\"right\"\n                                            key={\"header-\" + column.id}\n                                        >\n                                            {column.description}\n                                        </TableCell>\n                                    );\n                                })}\n                                <TableCell align=\"right\">Toelichting</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {this.state.data.days.map(row => (\n                                <TableRow\n                                    key={row.day}\n                                    className={this.getRowClass(row)}\n                                >\n                                    <TableCell component=\"th\" scope=\"row\">\n                                        {row.day}\n                                    </TableCell>\n                                    {this.columns.map(column => {\n                                        if (\n                                            !column.enabled &&\n                                            !this.state.data.expandColumns\n                                        ) {\n                                            return null;\n                                        }\n                                        return this.hoursCell(row, column.id);\n                                    })}\n                                    <TableCell align=\"right\">\n                                        {this.isNotWeekend(row.dayOfTheWeek) ? (\n                                            <TextField\n                                                id=\"explanation\"\n                                                inputProps={{\n                                                    day: row.day\n                                                }}\n                                                onBlur={event =>\n                                                    this.handleChange(\n                                                        event.target.value,\n                                                        \"explanation\",\n                                                        row.day\n                                                    )\n                                                }\n                                            />\n                                        ) : null}\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                        <TableFooter>\n                            <TableRow>\n                                <TableCell> Totaal</TableCell>\n                                {this.columns.map(column => {\n                                    if (\n                                        !column.enabled &&\n                                        !this.state.data.expandColumns\n                                    ) {\n                                        return null;\n                                    }\n                                    return (\n                                        <TableCell\n                                            align=\"right\"\n                                            key={\"footer-\" + column.id}\n                                        >\n                                            {this.getTotal(column.id)}\n                                        </TableCell>\n                                    );\n                                })}\n                                <TableCell align=\"right\"></TableCell>\n                            </TableRow>\n                        </TableFooter>\n                    </Table>\n                </TableContainer>\n                <Snackbar\n                    anchorOrigin={{\n                        vertical: \"bottom\",\n                        horizontal: \"left\"\n                    }}\n                    open={this.snackbarOpen}\n                    autoHideDuration={6000}\n                    message=\"Uren verstuurd\"\n                />\n            </form>\n        );\n    }\n}\n\nexport default HoursGrid;\n","import React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles(theme => ({\n    layout: {\n        width: \"auto\",\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1)\n    },\n    paper: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n        padding: theme.spacing(2)\n    }\n}));\n\nexport default function Profile() {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.layout}>\n            <form noValidate autoComplete=\"off\">\n                <Paper className={classes.paper}>\n                    <Grid container spacing={3}>\n                        <Grid item xs={12}>\n                            <TextField\n                                id=\"firstName\"\n                                label=\"Voornaam\"\n                                fullWidth\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                id=\"lastName\"\n                                label=\"Achternaam\"\n                                fullWidth\n                            />\n                        </Grid>\n                    </Grid>\n                </Paper>\n            </form>\n        </div>\n    );\n}\n","import React from \"react\";\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    NavLink\n} from \"react-router-dom\";\nimport clsx from \"clsx\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport List from \"@material-ui/core/List\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Divider from \"@material-ui/core/Divider\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport GridOn from \"@material-ui/icons/GridOn\";\nimport AccountCircle from \"@material-ui/icons/AccountCircle\";\nimport BookmarkBorder from \"@material-ui/icons/BookmarkBorder\";\nimport Typography from \"@material-ui/core/Typography\";\n\nimport HoursGrid from \"./hours/hoursGrid\";\nimport Profile from \"./profile/profile\";\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        display: \"flex\"\n    },\n    activeItem: {\n        backgroundColor: theme.palette.primary[100]\n    },\n    item: {},\n    menuButton: {\n        marginRight: 36\n    },\n    hide: {\n        display: \"none\"\n    },\n    drawer: {\n        width: drawerWidth,\n        flexShrink: 0,\n        whiteSpace: \"nowrap\"\n    },\n    drawerOpen: {\n        width: drawerWidth,\n        transition: theme.transitions.create(\"width\", {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen\n        })\n    },\n    drawerClose: {\n        transition: theme.transitions.create(\"width\", {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen\n        }),\n        overflowX: \"hidden\",\n        width: theme.spacing(7) + 1,\n        [theme.breakpoints.up(\"sm\")]: {\n            width: theme.spacing(9) + 1\n        }\n    },\n    toolbar: {\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        padding: theme.spacing(0, 1),\n        ...theme.mixins.toolbar\n    },\n    content: {\n        flexGrow: 1\n    },\n    title: {\n        margin: theme.spacing(0, 1)\n    }\n}));\n\nexport default function MiniDrawer() {\n    const classes = useStyles();\n    const [open] = React.useState(true);\n\n    return (\n        <div className={classes.root}>\n            <Router>\n                <CssBaseline />\n                <Drawer\n                    variant=\"permanent\"\n                    className={clsx(classes.drawer, {\n                        [classes.drawerOpen]: open,\n                        [classes.drawerClose]: !open\n                    })}\n                    classes={{\n                        paper: clsx({\n                            [classes.drawerOpen]: open,\n                            [classes.drawerClose]: !open\n                        })\n                    }}\n                >\n                    <div className={classes.toolbar}>CODEZILLA Hours</div>\n                    <Divider />\n                    <List>\n                        <ListItem\n                            component={NavLink}\n                            button\n                            key=\"profile\"\n                            to=\"/profile\"\n                        >\n                            <ListItemIcon>\n                                <AccountCircle />\n                            </ListItemIcon>\n                            <ListItemText primary=\"Profiel\" />\n                        </ListItem>\n                        <ListItem component={NavLink} button key=\"hours\" to=\"/\">\n                            <ListItemIcon>\n                                <GridOn />\n                            </ListItemIcon>\n                            <ListItemText primary=\"Maand\" />\n                        </ListItem>\n                        <ListItem\n                            component={NavLink}\n                            button\n                            key=\"template\"\n                            to=\"/template\"\n                        >\n                            <ListItemIcon>\n                                <BookmarkBorder />\n                            </ListItemIcon>\n                            <ListItemText primary=\"Template\" />\n                        </ListItem>\n                    </List>\n                </Drawer>\n                <main className={classes.content}>\n                    <Switch>\n                        <Route exact path=\"/\">\n                            <HoursGrid type=\"month\" />\n                        </Route>\n                        <Route path=\"/template\">\n                            <Typography\n                                variant=\"h4\"\n                                component=\"h4\"\n                                className={classes.title}\n                            >\n                                Template\n                            </Typography>\n                            <HoursGrid type=\"template\" />\n                        </Route>\n                        <Route path=\"/profile\">\n                            <Typography\n                                variant=\"h4\"\n                                component=\"h4\"\n                                className={classes.title}\n                            >\n                                Profiel\n                            </Typography>\n                            <Profile />\n                        </Route>\n                    </Switch>\n                </main>\n            </Router>\n\n            <script src=\"https://www.gstatic.com/firebasejs/7.11.0/firebase-app.js\"></script>\n\n            <script src=\"https://www.gstatic.com/firebasejs/7.11.0/firebase-analytics.js\"></script>\n\n            <script src=\"https://www.gstatic.com/firebasejs/7.11.0/firebase-auth.js\"></script>\n            <script src=\"https://www.gstatic.com/firebasejs/7.11.0/firebase-firestore.js\"></script>\n        </div>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}