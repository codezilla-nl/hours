{"version":3,"sources":["hours/hoursConstants.js","hours/hoursGrid.js","App.js","serviceWorker.js","index.js"],"names":["columns","id","description","enabled","months","years","HoursGrid","props","HoursConstants","state","data","days","getDaysInMonth","expandColumns","month","Date","getMonth","year","value","column","day","this","Number","setState","checked","prevState","daysInAMonth","getDate","rows","i","push","dayOfTheWeek","getDay","date","worked","overtime","sick","holiday","publicHoliday","available","education","other","standBy","kilometers","explanation","console","log","row","isNotWeekend","map","x","reduce","total","currentValue","TableCell","align","key","TextField","inputProps","style","textAlign","onBlur","event","handleChange","target","size","noValidate","autoComplete","Toolbar","Grid","container","direction","justify","alignItems","FormControl","Select","labelId","onChange","setMonth","MenuItem","FormControlLabel","control","Switch","color","label","TableContainer","component","Paper","className","Table","stickyHeader","aria-label","TableHead","TableRow","TableBody","getRowClass","scope","hoursCell","TableFooter","getTotal","React","Component","useStyles","makeStyles","theme","root","display","appBar","backgroundColor","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","width","enteringScreen","menuButton","marginRight","hide","flexShrink","whiteSpace","drawerOpen","drawerClose","overflowX","spacing","breakpoints","up","toolbar","justifyContent","padding","mixins","content","flexGrow","Boolean","window","location","hostname","match","ReactDOM","render","classes","useTheme","useState","open","setOpen","CssBaseline","AppBar","position","clsx","IconButton","onClick","edge","Typography","variant","noWrap","Drawer","paper","Divider","List","ListItem","button","ListItemIcon","ListItemText","primary","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wmBAAaA,EAAU,CACnB,CACIC,GAAI,SACJC,YAAa,UACbC,SAAS,GAEb,CACIF,GAAI,WACJC,YAAa,WACbC,SAAS,GAEb,CACIF,GAAI,OACJC,YAAa,OACbC,SAAS,GAEb,CACIF,GAAI,UACJC,YAAa,SACbC,SAAS,GAEb,CACIF,GAAI,gBACJC,YAAa,WACbC,SAAS,GAEb,CACIF,GAAI,YACJC,YAAa,cACbC,SAAS,GAEb,CACIF,GAAI,YACJC,YAAa,YACbC,SAAS,GAEb,CACIF,GAAI,QACJC,YAAa,SACbC,SAAS,GAEb,CACIF,GAAI,UACJC,YAAa,UACbC,SAAS,GAEb,CACIF,GAAI,aACJC,YAAa,aACbC,SAAS,IAIJC,EAAS,CAClB,CACIH,GAAI,EACJC,YAAa,WAEjB,CACID,GAAI,EACJC,YAAa,YAEjB,CACID,GAAI,EACJC,YAAa,SAEjB,CACID,GAAI,EACJC,YAAa,SAEjB,CACID,GAAI,EACJC,YAAa,OAEjB,CACID,GAAI,EACJC,YAAa,QAEjB,CACID,GAAI,EACJC,YAAa,QAEjB,CACID,GAAI,EACJC,YAAa,YAEjB,CACID,GAAI,EACJC,YAAa,aAEjB,CACID,GAAI,GACJC,YAAa,WAEjB,CACID,GAAI,GACJC,YAAa,YAEjB,CACID,GAAI,GACJC,YAAa,aAIRG,GAAQ,CAAC,KAAM,KAAM,KAAM,KAAM,MC2L/BC,G,YA9QX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAWVP,QAAUQ,EAZS,EAanBJ,OAASI,EAbU,EAcnBH,MAAQG,GAZJ,EAAKC,MAAQ,CACTC,KAAM,CACFC,KAAM,EAAKC,eAAe,EAAG,MAC7BC,eAAe,EACfC,MAAO,IAAIC,KAAKC,SAChBC,KAAM,OAPC,E,0EAgBNC,EAAOC,EAAQC,GACxB,IAAIT,EAAOU,KAAKZ,MAAMC,KAAKC,KAC3BA,EAAKS,GAAKD,GAAUG,OAAOJ,GAC3BG,KAAKE,SAAL,eAAmBF,KAAKZ,MAAMC,KAA9B,CAAoCC,KAAMA,O,oCAGhCa,GACVH,KAAKE,UAAS,SAAAE,GAEV,OADAA,EAAUf,KAAKG,cAAgBW,EACxBC,O,+BAINX,EAAOG,GACZ,IAAMN,EAAOU,KAAKT,eAAeE,EAAOG,GACxCI,KAAKE,UAAS,SAAAE,GAIV,OAHAA,EAAUf,KAAKI,MAAQA,EACvBW,EAAUf,KAAKO,KAAOA,EACtBQ,EAAUf,KAAKC,KAAOA,EACfc,O,qCAIAX,EAAOG,GAIlB,IAHA,IAAMS,EAAe,IAAIX,KAAKE,EAAMH,EAAO,GAAGa,UACxCC,EAAO,GAEJC,EAAI,EAAGA,EAAIH,EAAcG,IAC9BD,EAAKE,KAAK,CACNV,IAAKS,EACLE,aAAc,IAAIhB,KAAKE,EAAMH,EAAQ,EAAGe,GAAGG,SAC3CC,KAAM,IAAIlB,KAAKE,EAAMH,EAAQ,EAAGe,GAChCK,OAAQ,EACRC,SAAU,EACVC,KAAM,EACNC,QAAS,EACTC,cAAe,EACfC,UAAW,EACXC,UAAW,EACXC,MAAO,EACPC,QAAS,EACTC,WAAY,EACZC,YAAa,KAMrB,OAFAC,QAAQC,IAAIlB,GAELA,I,kCAGCmB,GACR,OAAO1B,KAAK2B,aAAaD,EAAIhB,cAAgB,GAAK,c,+BAG7CZ,GAEL,OADeE,KAAKZ,MAAMC,KAAKC,KAAKsC,KAAI,SAAAC,GAAC,OAAIA,EAAE/B,MACjCgC,QAAO,SAACC,EAAOC,GACzB,OAAOD,EAAQC,O,mCAIVtB,GACT,OAAwB,IAAjBA,GAAuC,IAAjBA,I,gCAGvBgB,EAAK5B,GAAS,IAAD,OACnB,OACI,kBAACmC,EAAA,EAAD,CAAWC,MAAM,QAAQC,IAAKT,EAAI3B,IAAM,IAAMD,GACzCE,KAAK2B,aAAaD,EAAIhB,cACnB,kBAAC0B,EAAA,EAAD,CACIxD,GAAIkB,EACJuC,WAAY,CACRC,MAAO,CACHC,UAAW,SAEfxC,IAAK2B,EAAI3B,KAEbyC,OAAQ,SAAAC,GAAK,OACT,EAAKC,aACDD,EAAME,OAAO9C,MACbC,EACA4B,EAAI3B,MAGZ6C,KAAK,UAET,Q,+BAKN,IAAD,OACL,OACI,0BAAMC,YAAU,EAACC,aAAa,OAC1B,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIC,WAAS,EACTC,UAAU,MACVC,QAAQ,gBACRC,WAAW,cAEX,6BACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIC,QAAQ,qBACR3E,GAAG,qBACHiB,MAAOG,KAAKZ,MAAMC,KAAKI,MACvB+D,SAAU,SAAAf,GAAK,OACX,EAAKgB,SACDhB,EAAME,OAAO9C,MACb,EAAKT,MAAMC,KAAKO,QAIvBI,KAAKjB,OAAO6C,KAAI,SAAAnC,GACb,OACI,kBAACiE,EAAA,EAAD,CACI7D,MAAOJ,EAAMb,GACbuD,IAAK1C,EAAMb,IAEVa,EAAMZ,kBAM3B,kBAACwE,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIC,QAAQ,oBACR3E,GAAG,oBACHiB,MAAOG,KAAKZ,MAAMC,KAAKO,KACvB4D,SAAU,SAAAf,GAAK,OACX,EAAKgB,SACD,EAAKrE,MAAMC,KAAKI,MAChBgD,EAAME,OAAO9C,SAIpBG,KAAKhB,MAAM4C,KAAI,SAAAhC,GACZ,OACI,kBAAC8D,EAAA,EAAD,CAAU7D,MAAOD,EAAMuC,IAAKvC,GACvBA,SAOzB,kBAAC+D,EAAA,EAAD,CACIC,QACI,kBAACC,EAAA,EAAD,CACI1D,QAASH,KAAKZ,MAAMC,KAAKG,cACzBgE,SAAU,SAAAf,GAAK,OACX,EAAKjD,cAAciD,EAAME,OAAOxC,UAEpC2D,MAAM,YAGdC,MAAM,uBAIlB,kBAACC,EAAA,EAAD,CAAgBC,UAAWC,IAAOC,UAAU,aACxC,kBAACC,EAAA,EAAD,CAAOC,cAAY,EAACzB,KAAK,QAAQ0B,aAAW,gBACxC,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACvC,EAAA,EAAD,MACCjC,KAAKrB,QAAQiD,KAAI,SAAA9B,GACd,OACKA,EAAOhB,SACP,EAAKM,MAAMC,KAAKG,cAKjB,kBAACyC,EAAA,EAAD,CACIC,MAAM,QACNC,IAAK,UAAYrC,EAAOlB,IAEvBkB,EAAOjB,aAPL,QAWf,kBAACoD,EAAA,EAAD,CAAWC,MAAM,SAAjB,iBAGR,kBAACuC,EAAA,EAAD,KACKzE,KAAKZ,MAAMC,KAAKC,KAAKsC,KAAI,SAAAF,GAAG,OACzB,kBAAC8C,EAAA,EAAD,CACIrC,IAAKT,EAAI3B,IACToE,UAAW,EAAKO,YAAYhD,IAE5B,kBAACO,EAAA,EAAD,CAAWgC,UAAU,KAAKU,MAAM,OAC3BjD,EAAI3B,KAER,EAAKpB,QAAQiD,KAAI,SAAA9B,GACd,OACKA,EAAOhB,SACP,EAAKM,MAAMC,KAAKG,cAId,EAAKoF,UAAUlD,EAAK5B,EAAOlB,IAFvB,QAIf,kBAACqD,EAAA,EAAD,CAAWC,MAAM,SACZ,EAAKP,aAAaD,EAAIhB,cACnB,kBAAC0B,EAAA,EAAD,CACIxD,GAAG,cACHyD,WAAY,CACRtC,IAAK2B,EAAI3B,KAEbyC,OAAQ,SAAAC,GAAK,OACT,EAAKC,aACDD,EAAME,OAAO9C,MACb,cACA6B,EAAI3B,QAIhB,WAKpB,kBAAC8E,EAAA,EAAD,KACI,kBAACL,EAAA,EAAD,KACI,kBAACvC,EAAA,EAAD,gBACCjC,KAAKrB,QAAQiD,KAAI,SAAA9B,GACd,OACKA,EAAOhB,SACP,EAAKM,MAAMC,KAAKG,cAKjB,kBAACyC,EAAA,EAAD,CACIC,MAAM,QACNC,IAAK,UAAYrC,EAAOlB,IAEvB,EAAKkG,SAAShF,EAAOlB,KAPnB,QAWf,kBAACqD,EAAA,EAAD,CAAWC,MAAM,mB,GArQzB6C,IAAMC,WCGxBC,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACFC,QAAS,QAEbC,OAAQ,CACJC,gBAAiB,UACjBC,OAAQL,EAAMK,OAAOC,OAAS,EAC9BC,WAAYP,EAAMQ,YAAYC,OAAO,CAAC,QAAS,UAAW,CACtDC,OAAQV,EAAMQ,YAAYE,OAAOC,MACjCC,SAAUZ,EAAMQ,YAAYI,SAASC,iBAG7CC,YAAa,CACTC,WAfY,IAgBZC,MAAM,eAAD,OAhBO,IAgBP,OACLT,WAAYP,EAAMQ,YAAYC,OAAO,CAAC,QAAS,UAAW,CACtDC,OAAQV,EAAMQ,YAAYE,OAAOC,MACjCC,SAAUZ,EAAMQ,YAAYI,SAASK,kBAG7CC,WAAY,CACRC,YAAa,IAEjBC,KAAM,CACFlB,QAAS,QAEbI,OAAQ,CACJU,MA7BY,IA8BZK,WAAY,EACZC,WAAY,UAEhBC,WAAY,CACRP,MAlCY,IAmCZT,WAAYP,EAAMQ,YAAYC,OAAO,QAAS,CAC1CC,OAAQV,EAAMQ,YAAYE,OAAOC,MACjCC,SAAUZ,EAAMQ,YAAYI,SAASK,kBAG7CO,YAAY,aACRjB,WAAYP,EAAMQ,YAAYC,OAAO,QAAS,CAC1CC,OAAQV,EAAMQ,YAAYE,OAAOC,MACjCC,SAAUZ,EAAMQ,YAAYI,SAASC,gBAEzCY,UAAW,SACXT,MAAOhB,EAAM0B,QAAQ,GAAK,GACzB1B,EAAM2B,YAAYC,GAAG,MAAQ,CAC1BZ,MAAOhB,EAAM0B,QAAQ,GAAK,IAGlCG,QAAQ,aACJ3B,QAAS,OACTjC,WAAY,SACZ6D,eAAgB,WAChBC,QAAS/B,EAAM0B,QAAQ,EAAG,IACvB1B,EAAMgC,OAAOH,SAEpBI,QAAS,CACLC,SAAU,EACVH,QAAS/B,EAAM0B,QAAQ,QCrEXS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBF+ED,WAAuB,IAAD,IAC3BC,EAAU5C,KACVE,EAAQ2C,cAFmB,EAGT/C,IAAMgD,UAAS,GAHN,mBAG1BC,EAH0B,KAGpBC,EAHoB,KAajC,OACI,yBAAK9D,UAAW0D,EAAQzC,MACpB,kBAAC8C,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CACIC,SAAS,QACTjE,UAAWkE,YAAKR,EAAQvC,OAAT,eACVuC,EAAQ5B,YAAc+B,KAG3B,kBAACjF,EAAA,EAAD,KACI,kBAACuF,EAAA,EAAD,CACIxE,MAAM,UACNQ,aAAW,cACXiE,QArBK,WACrBN,GAAQ,IAqBQO,KAAK,QACLrE,UAAWkE,YAAKR,EAAQxB,WAAT,eACVwB,EAAQtB,KAAOyB,KAGpB,kBAAC,IAAD,OAEJ,kBAACS,EAAA,EAAD,CAAYC,QAAQ,KAAKC,QAAM,GAA/B,qBAKR,kBAACC,EAAA,EAAD,CACIF,QAAQ,YACRvE,UAAWkE,YAAKR,EAAQpC,QAAT,mBACVoC,EAAQnB,WAAasB,GADX,cAEVH,EAAQlB,aAAeqB,GAFb,IAIfH,QAAS,CACLgB,MAAOR,aAAI,mBACNR,EAAQnB,WAAasB,GADf,cAENH,EAAQlB,aAAeqB,GAFjB,MAMf,yBAAK7D,UAAW0D,EAAQb,SACpB,kBAACsB,EAAA,EAAD,CAAYC,QA5CF,WACtBN,GAAQ,KA4C6B,QAApB9C,EAAMjC,UACH,kBAAC,IAAD,MAEA,kBAAC,IAAD,QAIZ,kBAAC4F,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAUC,QAAM,EAAC9G,IAAI,SACjB,kBAAC+G,EAAA,EAAD,KACI,kBAAC,IAAD,OAEJ,kBAACC,EAAA,EAAD,CAAcC,QAAQ,aAIlC,0BAAMjF,UAAW0D,EAAQT,SACrB,yBAAKjD,UAAW0D,EAAQb,UACxB,kBAAC,GAAD,UExJA,MAASqC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtI,QAAQsI,MAAMA,EAAMC,c","file":"static/js/main.c39eea8e.chunk.js","sourcesContent":["export const columns = [\n    {\n        id: \"worked\",\n        description: \"Gewerkt\",\n        enabled: true\n    },\n    {\n        id: \"overtime\",\n        description: \"Overwerk\",\n        enabled: true\n    },\n    {\n        id: \"sick\",\n        description: \"Ziek\",\n        enabled: true\n    },\n    {\n        id: \"holiday\",\n        description: \"Verlof\",\n        enabled: true\n    },\n    {\n        id: \"publicHoliday\",\n        description: \"Feestdag\",\n        enabled: true\n    },\n    {\n        id: \"available\",\n        description: \"Beschikbaar\",\n        enabled: false\n    },\n    {\n        id: \"education\",\n        description: \"Opleiding\",\n        enabled: false\n    },\n    {\n        id: \"other\",\n        description: \"Overig\",\n        enabled: false\n    },\n    {\n        id: \"standBy\",\n        description: \"StandBy\",\n        enabled: false\n    },\n    {\n        id: \"kilometers\",\n        description: \"Kilometers\",\n        enabled: false\n    }\n];\n\nexport const months = [\n    {\n        id: 1,\n        description: \"Januari\"\n    },\n    {\n        id: 2,\n        description: \"Februari\"\n    },\n    {\n        id: 3,\n        description: \"Maart\"\n    },\n    {\n        id: 4,\n        description: \"April\"\n    },\n    {\n        id: 5,\n        description: \"Mei\"\n    },\n    {\n        id: 6,\n        description: \"Juni\"\n    },\n    {\n        id: 7,\n        description: \"Juli\"\n    },\n    {\n        id: 8,\n        description: \"Augustus\"\n    },\n    {\n        id: 9,\n        description: \"September\"\n    },\n    {\n        id: 10,\n        description: \"Oktober\"\n    },\n    {\n        id: 11,\n        description: \"November\"\n    },\n    {\n        id: 12,\n        description: \"December\"\n    }\n];\n\nexport const years = [2020, 2021, 2022, 2023, 2025];\n","import React from \"react\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@material-ui/core/Grid\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Select from \"@material-ui/core/Select\";\nimport Switch from \"@material-ui/core/Switch\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport TableFooter from \"@material-ui/core/TableFooter\";\n\nimport * as HoursConstants from \"./hoursConstants\";\n\nclass HoursGrid extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: {\n                days: this.getDaysInMonth(0, 2020),\n                expandColumns: false,\n                month: new Date.getMonth(),\n                year: 2020\n            }\n        };\n    }\n\n    columns = HoursConstants.columns;\n    months = HoursConstants.months;\n    years = HoursConstants.years;\n\n    handleChange(value, column, day) {\n        var days = this.state.data.days;\n        days[day][column] = Number(value);\n        this.setState({ ...this.state.data, days: days });\n    }\n\n    expandColumns(checked) {\n        this.setState(prevState => {\n            prevState.data.expandColumns = checked;\n            return prevState;\n        });\n    }\n\n    setMonth(month, year) {\n        const days = this.getDaysInMonth(month, year);\n        this.setState(prevState => {\n            prevState.data.month = month;\n            prevState.data.year = year;\n            prevState.data.days = days;\n            return prevState;\n        });\n    }\n\n    getDaysInMonth(month, year) {\n        const daysInAMonth = new Date(year, month, 0).getDate();\n        const rows = [];\n\n        for (let i = 1; i < daysInAMonth; i++) {\n            rows.push({\n                day: i,\n                dayOfTheWeek: new Date(year, month - 1, i).getDay(),\n                date: new Date(year, month - 1, i),\n                worked: 0,\n                overtime: 0,\n                sick: 0,\n                holiday: 0,\n                publicHoliday: 0,\n                available: 0,\n                education: 0,\n                other: 0,\n                standBy: 0,\n                kilometers: 0,\n                explanation: \"\"\n            });\n        }\n\n        console.log(rows);\n\n        return rows;\n    }\n\n    getRowClass(row) {\n        return this.isNotWeekend(row.dayOfTheWeek) ? \"\" : \"highlight\";\n    }\n\n    getTotal(column) {\n        const values = this.state.data.days.map(x => x[column]);\n        return values.reduce((total, currentValue) => {\n            return total + currentValue;\n        });\n    }\n\n    isNotWeekend(dayOfTheWeek) {\n        return dayOfTheWeek !== 0 && dayOfTheWeek !== 6;\n    }\n\n    hoursCell(row, column) {\n        return (\n            <TableCell align=\"right\" key={row.day + \"-\" + column}>\n                {this.isNotWeekend(row.dayOfTheWeek) ? (\n                    <TextField\n                        id={column}\n                        inputProps={{\n                            style: {\n                                textAlign: \"right\"\n                            },\n                            day: row.day\n                        }}\n                        onBlur={event =>\n                            this.handleChange(\n                                event.target.value,\n                                column,\n                                row.day\n                            )\n                        }\n                        size=\"small\"\n                    />\n                ) : null}\n            </TableCell>\n        );\n    }\n\n    render() {\n        return (\n            <form noValidate autoComplete=\"off\">\n                <Toolbar>\n                    <Grid\n                        container\n                        direction=\"row\"\n                        justify=\"space-between\"\n                        alignItems=\"flex-start\"\n                    >\n                        <div>\n                            <FormControl>\n                                <Select\n                                    labelId=\"select-month-label\"\n                                    id=\"select-month-label\"\n                                    value={this.state.data.month}\n                                    onChange={event =>\n                                        this.setMonth(\n                                            event.target.value,\n                                            this.state.data.year\n                                        )\n                                    }\n                                >\n                                    {this.months.map(month => {\n                                        return (\n                                            <MenuItem\n                                                value={month.id}\n                                                key={month.id}\n                                            >\n                                                {month.description}\n                                            </MenuItem>\n                                        );\n                                    })}\n                                </Select>\n                            </FormControl>\n                            <FormControl>\n                                <Select\n                                    labelId=\"select-year-label\"\n                                    id=\"select-year-label\"\n                                    value={this.state.data.year}\n                                    onChange={event =>\n                                        this.setMonth(\n                                            this.state.data.month,\n                                            event.target.value\n                                        )\n                                    }\n                                >\n                                    {this.years.map(year => {\n                                        return (\n                                            <MenuItem value={year} key={year}>\n                                                {year}\n                                            </MenuItem>\n                                        );\n                                    })}\n                                </Select>\n                            </FormControl>\n                        </div>\n                        <FormControlLabel\n                            control={\n                                <Switch\n                                    checked={this.state.data.expandColumns}\n                                    onChange={event =>\n                                        this.expandColumns(event.target.checked)\n                                    }\n                                    color=\"primary\"\n                                />\n                            }\n                            label=\"Toon alle velden\"\n                        />\n                    </Grid>\n                </Toolbar>\n                <TableContainer component={Paper} className=\"hoursGrid\">\n                    <Table stickyHeader size=\"small\" aria-label=\"simple table\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell></TableCell>\n                                {this.columns.map(column => {\n                                    if (\n                                        !column.enabled &&\n                                        !this.state.data.expandColumns\n                                    ) {\n                                        return null;\n                                    }\n                                    return (\n                                        <TableCell\n                                            align=\"right\"\n                                            key={\"header-\" + column.id}\n                                        >\n                                            {column.description}\n                                        </TableCell>\n                                    );\n                                })}\n                                <TableCell align=\"right\">Toelichting</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {this.state.data.days.map(row => (\n                                <TableRow\n                                    key={row.day}\n                                    className={this.getRowClass(row)}\n                                >\n                                    <TableCell component=\"th\" scope=\"row\">\n                                        {row.day}\n                                    </TableCell>\n                                    {this.columns.map(column => {\n                                        if (\n                                            !column.enabled &&\n                                            !this.state.data.expandColumns\n                                        ) {\n                                            return null;\n                                        }\n                                        return this.hoursCell(row, column.id);\n                                    })}\n                                    <TableCell align=\"right\">\n                                        {this.isNotWeekend(row.dayOfTheWeek) ? (\n                                            <TextField\n                                                id=\"explanation\"\n                                                inputProps={{\n                                                    day: row.day\n                                                }}\n                                                onBlur={event =>\n                                                    this.handleChange(\n                                                        event.target.value,\n                                                        \"explanation\",\n                                                        row.day\n                                                    )\n                                                }\n                                            />\n                                        ) : null}\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                        <TableFooter>\n                            <TableRow>\n                                <TableCell> Totaal</TableCell>\n                                {this.columns.map(column => {\n                                    if (\n                                        !column.enabled &&\n                                        !this.state.data.expandColumns\n                                    ) {\n                                        return null;\n                                    }\n                                    return (\n                                        <TableCell\n                                            align=\"right\"\n                                            key={\"footer-\" + column.id}\n                                        >\n                                            {this.getTotal(column.id)}\n                                        </TableCell>\n                                    );\n                                })}\n                                <TableCell align=\"right\"></TableCell>\n                            </TableRow>\n                        </TableFooter>\n                    </Table>\n                </TableContainer>\n            </form>\n        );\n    }\n}\n\nexport default HoursGrid;\n","import React from \"react\";\nimport clsx from \"clsx\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport List from \"@material-ui/core/List\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport GridOn from \"@material-ui/icons/GridOn\";\n\nimport HoursGrid from \"./hours/hoursGrid\";\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        display: \"flex\"\n    },\n    appBar: {\n        backgroundColor: \"#67d518\",\n        zIndex: theme.zIndex.drawer + 1,\n        transition: theme.transitions.create([\"width\", \"margin\"], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen\n        })\n    },\n    appBarShift: {\n        marginLeft: drawerWidth,\n        width: `calc(100% - ${drawerWidth}px)`,\n        transition: theme.transitions.create([\"width\", \"margin\"], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen\n        })\n    },\n    menuButton: {\n        marginRight: 36\n    },\n    hide: {\n        display: \"none\"\n    },\n    drawer: {\n        width: drawerWidth,\n        flexShrink: 0,\n        whiteSpace: \"nowrap\"\n    },\n    drawerOpen: {\n        width: drawerWidth,\n        transition: theme.transitions.create(\"width\", {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen\n        })\n    },\n    drawerClose: {\n        transition: theme.transitions.create(\"width\", {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen\n        }),\n        overflowX: \"hidden\",\n        width: theme.spacing(7) + 1,\n        [theme.breakpoints.up(\"sm\")]: {\n            width: theme.spacing(9) + 1\n        }\n    },\n    toolbar: {\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"flex-end\",\n        padding: theme.spacing(0, 1),\n        ...theme.mixins.toolbar\n    },\n    content: {\n        flexGrow: 1,\n        padding: theme.spacing(3)\n    }\n}));\n\nexport default function MiniDrawer() {\n    const classes = useStyles();\n    const theme = useTheme();\n    const [open, setOpen] = React.useState(false);\n\n    const handleDrawerOpen = () => {\n        setOpen(true);\n    };\n\n    const handleDrawerClose = () => {\n        setOpen(false);\n    };\n\n    return (\n        <div className={classes.root}>\n            <CssBaseline />\n            <AppBar\n                position=\"fixed\"\n                className={clsx(classes.appBar, {\n                    [classes.appBarShift]: open\n                })}\n            >\n                <Toolbar>\n                    <IconButton\n                        color=\"inherit\"\n                        aria-label=\"open drawer\"\n                        onClick={handleDrawerOpen}\n                        edge=\"start\"\n                        className={clsx(classes.menuButton, {\n                            [classes.hide]: open\n                        })}\n                    >\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\" noWrap>\n                        CODEZILLA HOURS\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <Drawer\n                variant=\"permanent\"\n                className={clsx(classes.drawer, {\n                    [classes.drawerOpen]: open,\n                    [classes.drawerClose]: !open\n                })}\n                classes={{\n                    paper: clsx({\n                        [classes.drawerOpen]: open,\n                        [classes.drawerClose]: !open\n                    })\n                }}\n            >\n                <div className={classes.toolbar}>\n                    <IconButton onClick={handleDrawerClose}>\n                        {theme.direction === \"rtl\" ? (\n                            <ChevronRightIcon />\n                        ) : (\n                            <ChevronLeftIcon />\n                        )}\n                    </IconButton>\n                </div>\n                <Divider />\n                <List>\n                    <ListItem button key=\"hours\">\n                        <ListItemIcon>\n                            <GridOn />\n                        </ListItemIcon>\n                        <ListItemText primary=\"hours\" />\n                    </ListItem>\n                </List>\n            </Drawer>\n            <main className={classes.content}>\n                <div className={classes.toolbar} />\n                <HoursGrid />\n            </main>\n        </div>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}